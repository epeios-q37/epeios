<xpp:bloc xmlns="http://www.w3.org/1999/xhtml" xmlns:xpp="http://epeios.q37.info/ns/xpp">

function loadScript(url, callback)
{
   var head = document.getElementsByTagName('head')[0];
   var script = document.createElement('script');
   script.type = 'text/javascript';
   script.src = url;

   script.onreadystatechange = callback;
   script.onload = callback;

   head.appendChild(script);
}

function loadLink(url, callback)
{
   var head = document.getElementsByTagName('head')[0];
   var link = document.createElement('link');
   link.rel = 'stylesheet';
   link.src = url;

   link.onreadystatechange = callback;
   link.onload = callback;

   head.appendChild(link);
}

function clickListener(abcelem, tuneNumber, classes, analysis, drag, mouseEvent) {
  end = classes.lastIndexOf(" abcjs-v0");
  begin = classes.lastIndexOf("abcjs-mm", end)+8;
  note = classes.substring(begin, end);
  launchEvent(note + "|DUMMY|dummy||((dummy|SelectNote))");
}
  
function renderABC(abc) {
  visualObj = ABCJS.renderAbc("Score", abc, { add_classes: true, clickListener: clickListener } );
}

function setMyKeyDownListener() {
  window.addEventListener(
  "keydown",
  function(event) {MyFunction(event.key)}
  )
}

function MyFunction (the_Key) {
  alert("Key pressed is: "+the_Key);
}		

var index = -1;
var stylesheet;

function createStylesheet() {
  const styleEl = document.createElement('style');
  
  document.head.appendChild(styleEl);
  stylesheet = styleEl.sheet;
}

function highlightNote(note) {
  if ( index !== -1 )
    stylesheet.deleteRule(index);
    
  if ( note.length !== 0 ) {
    index = stylesheet.insertRule( ".abcjs-n0.abcjs-mm" + note + " {color: crimson;}");
  } else {
    index = -1;
  }
}

var visualOptions = {  };
var visualObj;
var synthControl;
var synth;

var controlOptions = {
  displayRestart: true,
  displayPlay: true,
  displayProgress: true,
  displayClock: true,
  displayWarp: true,
};

function bindKey(key, action, id = 'dummy') {
  keyboardJS.bind(key, (e) => {
    console.log(e, e.target.nodeName, "'" + key + "' is pressed.");
    if ( !['TEXTAREA','SELECT','INPUT'].includes(e.target.nodeName.toUpperCase()))
      launchEvent(id + "|DUMMY|click||((click|" + action + "))");
  });
}

function bindKeys(bindings) {
  for (const [key, value] of Object.entries(bindings)) {
    if ( Array.isArray( value ))
      bindKey(key, value[0], value[1]);
    else
      bindKey(key, value);
  }
}

var keyBindings = {
  'left': 'Previous',
  'right': 'Next',
  'del': 'Delete',
  'backspace': 'Backspace',
  '0': 'Rest',
  'num0': 'Rest',
  'num.': 'Dot',
  'num-': 'Tie',
  'end': 'Last',
  'home': 'First',
};

function activate() {
  for ( i = 1; i != 8; i++ ) {
    keyBindings[i.toString()] = ['Duration', i.toString()];
    keyBindings['num' + i] = ['Duration', i.toString()];
  }

  bindKeys(keyBindings);
  
  if (ABCJS.synth.supportsAudio()) {
    synthControl = new ABCJS.synth.SynthController();
    synthControl.load("#audio", null, controlOptions);
    synthControl.disable(true);
    var midiBuffer = new ABCJS.synth.CreateSynth();
    midiBuffer.init({
      visualObj: visualObj[0],
      options: {
        
      }

    }).then(function () {
      synthControl.setTune(visualObj[0], true).then(function (response) {
      document.querySelector(".abcjs-inline-audio").classList.remove("disabled");
      })
    });
  } else {
    console.log("audio is not supported on this browser");
  };
}

function play(note) {
  console.log(note);
  ABCJS.synth.playEvent(
    [
      {"cmd":"note","pitch":note,"volume":105,"start":0,"duration":0.125,"instrument":0,"gap":0},
    ],
  ).then(function (response) {
    console.log("note played");
  }).catch(function (error) {
    console.log("error playing note", error);
  });
  }

function updatePlayer() {
  if (ABCJS.synth.supportsAudio()) {
/*    synthControl.load("#audio", null, controlOptions); */
    var midiBuffer = new ABCJS.synth.CreateSynth();
    midiBuffer.init({
      visualObj: visualObj[0],
      options: {
        
      }
    }).then(function () {
      synthControl.setTune(visualObj[0], true).then(function (response) {
      document.querySelector(".abcjs-inline-audio").classList.remove("disabled");
/*      synthControl.setWarp("100"); */
      })
    });
  } else {
    console.log("audio is not supported on this browser");
  };
}

function resizeIFrame( iFrame ) {
    iFrame.width  = iFrame.contentWindow.document.body.scrollWidth;
    iFrame.height = iFrame.contentWindow.document.body.scrollHeight;
}

function resizeOutputIFrame() {
  resizeIFrame( document.getElementsByTagName("iframe")[0]);
}
</xpp:bloc> 